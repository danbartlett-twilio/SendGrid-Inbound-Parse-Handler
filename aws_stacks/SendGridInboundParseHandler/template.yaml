AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: This stack contains two options for using API Gateway to handle Inbound Emails from SendGrid.

Parameters:
  RawInboundEmailsBucketName:
    Type: String
  QueueName:
    Type: String

Resources:

  ##########################################################################
  #  SQS Queue                 
  #
  #  This queue holds for processing any inbound emails relayed by the
  #  SendGrid Inbound Parse webhook.
  #  The queue handles spikey traffic so that the downstream functions are
  #  not overrun by spikey traffic.
  ##########################################################################
  SGInboundEmailQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName
  SGInboundEmailQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Id: QueuePolicy
        Statement:
          - Sid: Allow-SendMessage-To-Queue-InboundEmail-From-S3-Event-Notification
            Effect: Allow
            Principal: 
              Service: "s3.amazonaws.com"
            Action:
              - "sqs:SendMessage"
            Resource: !GetAtt SGInboundEmailQueue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Join ["",['arn:aws:s3:::',!Ref RawInboundEmailsBucketName]]
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Queues: 
        - !Ref SGInboundEmailQueue      

  ##########################################################################
  #  S3 Bucket
  #                          
  #  Bucket to store all raw inbound emails (base64 encoded) sent from SendGrid. 
  #  This bucket is used for the API => S3 => SQS flow.
  ########################################################################## 
  SendGridRawInboundEmailBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - SGInboundEmailQueuePolicy
    Properties:      
      BucketName: !Ref RawInboundEmailsBucketName
      ##########################################################
      # This configuraiton sets up hook so that any object
      # created in this bucket triggers an event on the attached
      # SQS queue. This is used for the API => S3 => SQS flow.
      ##########################################################
      NotificationConfiguration:
        QueueConfigurations:
          - Event: "s3:ObjectCreated:*"
            Queue: !GetAtt SGInboundEmailQueue.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.b64'      
  SendGridRawInboundEmailBucketPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref SendGridRawInboundEmailBucket
                - /*    

  ##########################################################################
  #  S3 Bucket: SendGridInboundParseBucket
  #                          
  #  Bucket to store all emails (email object in json and any attachments).
  ########################################################################## 
  SendGridInboundParseBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "twilio-sendgrid-inbound-parse-${AWS::AccountId}-${AWS::Region}"  
  
  ##########################################################################
  #  SNS Topic                 
  #
  #  SQS Messages passing security check get sent to SNS Topic to fan out
  #  for additional processing by any topic subscribers. 
  ##########################################################################
  SGInboundEmailTopic:
    Type: AWS::SNS::Topic

  ##########################################################################
  #  SGInboundEmailToS3Api
  #
  #  HTTP API: API => S3 => SQS
  #
  #  This api receives POST containing inbound email from SendGrid 
  #  and sends them to the S3 bucket.  
  #  
  #  This event processing flow uses API Gateway to accept posts from
  #  SendGrid and, after checking BASIC AUTHENTICATION, PUTS the object
  #  directly into an S3 bucket. The createObject event in S3 triggers
  #  a message into the SQS queue.
  ##########################################################################
  SGInboundEmailToS3Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: Path /sendgrid-inbound accepts POST calls to save payload to S3 bucket.
      AccessLogSettings:
        DestinationArn: !GetAtt SGInboundEmailToS3ApiLogs.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      StageVariables:
        AUTH_LEVEL: 'PRIVATE'
  
  ##########################################################################
  #  Lambda Function: SendGridInboundEmailToS3Function                            
  #                          
  #  This function is invoked by the "SGInboundEmailToS3Api" API GATEWAY 
  #  and it opens the request, pulls out the authorization header and verifies
  #  it, and, if matches, puts the payload and headers into the S3 bucket.
  ##########################################################################
  SendGridInboundEmailToS3Function:
    Type: AWS::Serverless::Function
    Properties:
      Description: Invoked by API GW, checks Basic Auth, PUTS event payload into S3 object keeping base64 encoding.
      CodeUri: lambdas/inbound-email-to-s3/
      AutoPublishAlias: live
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64      
      Timeout: 10
      MemorySize: 128      
      Environment:
        Variables:          
          RAW_INBOUND_EMAIL_BUCKET: !Ref RawInboundEmailsBucketName
          ###############################################
          # This lambda function checks the authorization
          # header passed in with the request. It uses
          # basic auth set in the SendGrid EVENT WEBHOOKD
          # endpoint.
          # https://parseUser:pass123@your-api-gateway-url
          # The USER and PASSWORD entered here MUST match
          # the values you put in the EVENT WEBHOOK 
          # Webhook URL in SendGrid!
          ###############################################
          # Set test USER and PASSWORDS like below for POC
          # SIMPLE SAMPLE USER/PASSWORD BELOW
          # DO NOT STORE VALUES LIKE THIS IN CODE!           
          INBOUND_PARSE_USER: "parseUser"          
          INBOUND_PARSE_PASSWORD: "pass123"          
          # Use a secure method for production such as 
          # pulling from the AWS Parameter Store or Secrets Manager.
          # For example:
          # INBOUND_PARSE_USER: '{{resolve:ssm:YOUR-INBOUND_PARSE_USER}}'
          # INBOUND_PARSE_PASSWORD: '{{resolve:ssm:YOUR-INBOUND_PARSE_PASSWORD}}'
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html              
      Role: !GetAtt SendGridInboundEmailToS3FunctionRole.Arn
      Events:
        PostSendGridInboundEmail:
          Type: HttpApi
          Properties:
            Path: /sendgrid-inbound
            Method: post
            ApiId: !Ref SGInboundEmailToS3Api
  SendGridInboundEmailToS3FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref SendGridRawInboundEmailBucketPolicy
        - arn:aws:iam::aws:policy/AWSLambdaExecute  

  ##########################################################################
  #  SGInboundEmailToSQSApi                                                             
  #
  #  This api receives POST Status Callback requests from Twilio and
  #  sends them directly to an SQS queue for processed. 
  ##########################################################################
  SGInboundEmailToSQSApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt SGInboundEmailToSQSApiLogs.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      # This points to a separate yaml file!
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: 'api.yaml'
      StageVariables:
        AUTH_LEVEL: 'PRIVATE'    

  ##########################################################################
  #  Lambda Layers
  #                          
  #  Key code snippets separated in Lambda layers to simplify code and
  #  allow for reuse.
  ##########################################################################
  # Nodejs library used to parse multipart form data
  SGParseMultipartDataLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SGParseMultipartDataLayer
      Description: Node Library used parse multipart form data
      ContentUri: layers/layer-parse-multipart-data/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain     

  ##########################################################################
  #  Lambda Function                            
  #                          
  #  This function receives messages from SQS queue, checks the authorization
  #  header is coming from API => SQS, parses the email, saves email contents,
  #  to S3 (including any attachments if coming from API=>Lambda=>S3=>SWS) 
  #  and publishes summary object to an SNS topic for downstream processing. 
  ##########################################################################
  SGInboundEmailQueueLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:      
      Description: Process Inbound Email Lambda to be invoked by the SQS Queue
      CodeUri: lambdas/handle-sqs-messages/
      Handler: app.lambdaHandler
      AutoPublishAlias: live
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:          
          SNStopic: !Ref SGInboundEmailTopic          
          REGION: !Ref "AWS::Region"
          SENDGRID_INBOUND_PARSE_BUCKET: !Ref SendGridInboundParseBucket
          ###############################################
          # This lambda function checks the authorization
          # header passed in with the request. It uses
          # basic auth set in the SendGrid Inbound Parse
          # endpoint.
          # https://parseUser:pass123@your-api-gateway-url
          # The USER and PASSWORD entered here MUST match
          # the values you put in the INBOUND PARSE 
          # Webhook URL.
          ###############################################
          # Set a test API Key like below for POC
          # DO NOT STORE VALUES LIKE THIS IN CODE!...
          INBOUND_PARSE_USER: "parseUser"          
          INBOUND_PARSE_PASSWORD: "pass123"          
          # Use a secure method for production such as 
          # pulling from the AWS Parameter Store or Secrets Manager.
          # For example:
          # INBOUND_PARSE_USER: '{{resolve:ssm:YOUR-INBOUND_PARSE_USER}}'
          # INBOUND_PARSE_PASSWORD: '{{resolve:ssm:YOUR-INBOUND_PARSE_PASSWORD}}'     
      Layers:
        - !Ref SGParseMultipartDataLayer
      Events:
        SGInboundEmailQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SGInboundEmailQueue.Arn
            # OPTIONALLY control BatchSize
            # Likely best to keep at 1 to allow for entire 256 K
            # available in SQS message to be available for each inbound email
            # https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-batch-api-actions.html
            BatchSize: 1
            # OPTIONALLY control MaximumConcurrency to limit number
            # of lambdas that can process messages from the SQS queue.
            # Default setting to 2
            # https://aws.amazon.com/blogs/compute/introducing-maximum-concurrency-of-aws-lambda-functions-when-using-amazon-sqs-as-an-event-source/
            ScalingConfig:
              MaximumConcurrency: 2            
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SGInboundEmailTopic.TopicName
        - S3ReadPolicy:
            BucketName: !Ref SendGridRawInboundEmailBucket
        - S3WritePolicy:
            BucketName: !Ref SendGridInboundParseBucket                         

  ##########################################################################
  # Roles
  # 
  # Role allows api gateway (used in api.yaml) to post messages directly
  # to SQS queue.
  ##########################################################################
  SGInboundEmailToS3ApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: EventWebhookPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:DescribeLogGroups'
                - 'logs:DescribeLogStreams'
                - 'logs:PutLogEvents'
                - 'logs:GetLogEvents'
                - 'logs:FilterLogEvents'
              Resource: !GetAtt SGInboundEmailToS3ApiLogs.Arn
  SGInboundEmailToSQSApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: AllowSqsIntegration
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'sqs:SendMessage'
                - 'sqs:GetQueueUrl'
                - 'sqs:SendMessageBatch'
              Resource: !GetAtt SGInboundEmailQueue.Arn
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:DescribeLogGroups'
                - 'logs:DescribeLogStreams'
                - 'logs:PutLogEvents'
                - 'logs:GetLogEvents'
                - 'logs:FilterLogEvents'
              Resource: !GetAtt SGInboundEmailToSQSApiLogs.Arn

  ##########################################################################
  #   Cloudwatch Logs                                                       
  ##########################################################################
  SGInboundEmailToS3ApiLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: SGInboundEmailToS3Api-Access-Logs
      RetentionInDays: 1
  SGInboundEmailToSQSApiLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: SGInboundEmailToSQSApi-Access-Logs
      RetentionInDays: 1      


##########################################################################
#   Outputs
##########################################################################
Outputs:
  SGInboundEmailToS3Api:
    Description: "HTTP API endpoint"
    Value: !Sub "https://${SGInboundEmailToS3Api}.execute-api.${AWS::Region}.amazonaws.com"

  SGInboundEmailToSQSApi:
    Description: "HTTP API endpoint"
    Value: !Sub "https://${SGInboundEmailToSQSApi}.execute-api.${AWS::Region}.amazonaws.com"

  SGInboundEmailQueueLambdaFunction:
    Description: SGInboundEmailQueueLambdaFunction function name
    Value: !Ref SGInboundEmailQueueLambdaFunction

  SGInboundEmailQueue:
    Description: SQS queue ARN
    Value: !GetAtt SGInboundEmailQueue.Arn

  SGInboundEmailQueueURL:
    Description: SQS queue URL
    Value: !Ref SGInboundEmailQueue

  SGInboundEmailTopic:
    Description: SNS topic name
    Value: !GetAtt SGInboundEmailTopic.TopicName
    Export:
      Name: 'SGInboundEmailTopic'

  SGInboundEmailTopicARN:
    Description: SNS topic ARN
    Value: !Ref SGInboundEmailTopic    
    Export:
      Name: 'SGInboundEmailTopicARN'